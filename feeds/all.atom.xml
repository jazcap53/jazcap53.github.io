<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Making progress...</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2020-05-17T00:00:00-04:00</updated><entry><title>Python's Eccentric `str.center()`</title><link href="/pythons-eccentric-strcenter.html" rel="alternate"></link><published>2020-05-17T00:00:00-04:00</published><updated>2020-05-17T00:00:00-04:00</updated><author><name>Andy Jarcho</name></author><id>tag:None,2020-05-17:/pythons-eccentric-strcenter.html</id><summary type="html">&lt;h2&gt;A bit of odd behavior&lt;/h2&gt;
&lt;p&gt;There's a small piece of Python that's made me curious: the behavior of str.center().&lt;/p&gt;
&lt;p&gt;Python 3.8's &lt;a href="https://docs.python.org/3/library/stdtypes.html#str.center"&gt;official doc for that method&lt;/a&gt; reads, in full:  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;str.center(width[, fillchar])&lt;br&gt;
Return centered in a string of length width. Padding is done using the specified fillchar â€¦&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;h2&gt;A bit of odd behavior&lt;/h2&gt;
&lt;p&gt;There's a small piece of Python that's made me curious: the behavior of str.center().&lt;/p&gt;
&lt;p&gt;Python 3.8's &lt;a href="https://docs.python.org/3/library/stdtypes.html#str.center"&gt;official doc for that method&lt;/a&gt; reads, in full:  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;str.center(width[, fillchar])&lt;br&gt;
Return centered in a string of length width. Padding is done using the specified fillchar (default is an ASCII space). The original string is returned if width is less than or equal to len(s).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;OK. But what happens when len(s) is odd and width is even, or vice versa? Then, it's not possible to exactly center the string in the output field.&lt;/p&gt;
&lt;p&gt;When you call, e.g.,  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;^&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python has to choose between '^^^hello^^' and '^^hello^^^'. In this case, Python chooses '^^hello^^^'. 
The shorter segment of padding appears before the input string; the longer padding comes after.&lt;/p&gt;
&lt;p&gt;But, when you call  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="s1"&gt;&amp;#39;heck&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;^&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;the output is '^^^heck^^', with the &lt;em&gt;longer&lt;/em&gt; piece of padding going first.&lt;/p&gt;
&lt;p&gt;PyPy, cython, and jython all exhibit the same behavior.&lt;/p&gt;
&lt;p&gt;That's always struck me as odd, so I looked into Python's source code for the implementation.&lt;/p&gt;
&lt;p&gt;After much hunting (thank you &lt;a href="https://github.com/ggreer/the_silver_searcher"&gt;ag, the Silver Searcher&lt;/a&gt;), 
I found the relevant code in 'cpython/Objects/unicodeobject.c'.&lt;/p&gt;
&lt;p&gt;It looks like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="nf"&gt;unicode_center_impl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Py_ssize_t&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Py_UCS4&lt;/span&gt; &lt;span class="n"&gt;fillchar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="cm"&gt;/*[clinic end generated code: output=420c8859effc7c0c input=b42b247eb26e6519]*/&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Py_ssize_t&lt;/span&gt; &lt;span class="n"&gt;marg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyUnicode_READY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyUnicode_GET_LENGTH&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;unicode_result_unchanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;marg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;PyUnicode_GET_LENGTH&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;marg&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;marg&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;marg&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fillchar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These three lines show what's going on:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="n"&gt;marg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;PyUnicode_GET_LENGTH&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;marg&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;marg&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;pad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;marg&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fillchar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's refer to our input string as 'S'. &lt;code&gt;PyUnicode_GET_LENGTH(self)&lt;/code&gt; 
is simply the length of S. So, if &lt;code&gt;width&lt;/code&gt; (our field width) and len(S) have 
the same parity:&lt;br&gt;
- &lt;code&gt;marg&lt;/code&gt; will be even,&lt;br&gt;
- &lt;code&gt;(marg &amp;amp; width &amp;amp; 1)&lt;/code&gt; will be 0, &lt;br&gt;
- &lt;code&gt;left&lt;/code&gt; will equal &lt;code&gt;marg - left&lt;/code&gt;,&lt;br&gt;
- there will be the same amount of padding before and after S,&lt;br&gt;
and everybody goes home happy.&lt;/p&gt;
&lt;p&gt;But if &lt;code&gt;width&lt;/code&gt; and len(S) have &lt;strong&gt;different&lt;/strong&gt; parity:&lt;br&gt;
- &lt;code&gt;marg&lt;/code&gt; will be odd,&lt;br&gt;
- &lt;code&gt;left&lt;/code&gt; will differ from &lt;code&gt;marg - left&lt;/code&gt; by exactly 1,&lt;br&gt;
   - if &lt;code&gt;width&lt;/code&gt; is odd, Python adds 1 to &lt;code&gt;left&lt;/code&gt;, and our extra fill character appears to the left of S,&lt;br&gt;
   - if &lt;code&gt;width&lt;/code&gt; is even, Python adds 0 to &lt;code&gt;left&lt;/code&gt;, and our extra fill character appears to the &lt;em&gt;right&lt;/em&gt; of S.  &lt;/p&gt;
&lt;p&gt;Why is this behavior undocumented? The answer lies in 
&lt;a href="https://devguide.python.org/documenting/#economy-of-expression"&gt;Section 7.2.5&lt;/a&gt; 
of the Python Developer's Guide: "Economy of Expression". Its first sentence reads:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;More documentation is not necessarily better documentation. 
Err on the side of being succinct.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;'Nuf said.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Hitting Pytest's caplog with a Hammer</title><link href="/hitting-pytests-caplog-with-a-hammer.html" rel="alternate"></link><published>2020-03-30T00:00:00-04:00</published><updated>2020-03-30T00:00:00-04:00</updated><author><name>Andy Jarcho</name></author><id>tag:None,2020-03-30:/hitting-pytests-caplog-with-a-hammer.html</id><summary type="html">&lt;h1&gt;But it looked like a nail...&lt;/h1&gt;
&lt;h3&gt;The introduction&lt;/h3&gt;
&lt;p&gt;I've been trying to improve the (then 51%, as measured by pytest-cov) coverage on a script-in-progress, called 
Caffeine Monitor.&lt;/p&gt;
&lt;h3&gt;The system under test&lt;/h3&gt;
&lt;p&gt;Caffeine Monitor keeps tabs (ahem) on the amount of caffeine in your body.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you call it with no â€¦&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;But it looked like a nail...&lt;/h1&gt;
&lt;h3&gt;The introduction&lt;/h3&gt;
&lt;p&gt;I've been trying to improve the (then 51%, as measured by pytest-cov) coverage on a script-in-progress, called 
Caffeine Monitor.&lt;/p&gt;
&lt;h3&gt;The system under test&lt;/h3&gt;
&lt;p&gt;Caffeine Monitor keeps tabs (ahem) on the amount of caffeine in your body.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you call it with no arguments, the script gets your previous reading (level and time) from a .json file. Then it &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;calculates your current caffeine level from that data based on a simple formula&lt;/li&gt;
&lt;li&gt;writes the new level and time to stdout, and&lt;/li&gt;
&lt;li&gt;overwrites the .json file with the new reading.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To tell the script you just drank a cup of coffee with 240 mg of caffeine, you call it with the single argument 240.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you had a cup of coffee an hour ago, but forgot to 'tell' the script, just call it with the arguments 240 60.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's the method that overwrites the .json file, and maintains the log.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CaffeineMonitor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iofile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="c1"&gt;# self.iofile is the .json file&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iofile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;truncate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;log_mesg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;level is {round(self.data_dict[&amp;quot;level&amp;quot;], 1)}&amp;#39;&lt;/span&gt;  &lt;span class="c1"&gt;# level &lt;/span&gt;
                    &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;at &lt;/span&gt;&lt;span class="si"&gt;{self.data_dict[&amp;quot;time&amp;quot;]}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                  &lt;span class="c1"&gt;# and time&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mg_to_add&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
            &lt;span class="n"&gt;log_mesg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{self.mg_to_add}&lt;/span&gt;&lt;span class="s1"&gt; mg added: &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;log_mesg&lt;/span&gt;
            &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log_mesg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# just had caffeine: use log level INFO&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log_mesg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# no new caffeine: log as DEBUG&lt;/span&gt;
        &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data_dict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iofile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;The process&lt;/h3&gt;
&lt;p&gt;I'd been struggling to test this method using pytest and pytest_mock (I'm learning about mocking and patching).
I got an object lesson in "when the only tool you have is a hammer, everything starts to look like a nail".&lt;/p&gt;
&lt;p&gt;The main obstacle was capturing the log output for my tests.
I started out trying to use &lt;code&gt;mocker&lt;/code&gt; to mock out the logging functionality.
Six hours later, I was &lt;em&gt;still&lt;/em&gt; trying to use &lt;code&gt;mocker&lt;/code&gt; to...&lt;/p&gt;
&lt;p&gt;Then I ran across an &lt;a href="https://stackoverflow.com/questions/22657591/get-all-logging-output-with-mock"&gt;SO post&lt;/a&gt; 
that introduced me to &lt;code&gt;caplog&lt;/code&gt;. The relevant part of the post was the answer by @hoefling.&lt;/p&gt;
&lt;p&gt;@hoefling's pytest example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# spam.py&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;# tests.py&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;spam&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;caplog&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;caplog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;records&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;caplog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;records&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;levelno&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;spam&amp;#39;&lt;/span&gt;
    &lt;span class="c1"&gt;# etc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;didn't work for me initially. &lt;code&gt;len(caplog.records)&lt;/code&gt; turned out to be 0 here also, until I played with the code a bit.&lt;/p&gt;
&lt;h3&gt;The solution&lt;/h3&gt;
&lt;p&gt;My root logger is set up as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# src/caffeine_monitor.py&lt;/span&gt;

    &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;current_environment&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;log_file&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                        &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The tests that work are: (&lt;code&gt;cm&lt;/code&gt; and &lt;code&gt;test_files&lt;/code&gt; are fixtures, set up in &lt;code&gt;conftest.py&lt;/code&gt;, that return a &lt;code&gt;CaffeineMonitor&lt;/code&gt; 
instance and a pair of file names, respectively)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_write_file_add_mg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test_files&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;caplog&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;l_file_handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;cur_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;_%H:%M&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;level&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;140.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cur_time&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;caplog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_level&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;INFO&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mg_to_add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;140&lt;/span&gt;

        &lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write_file&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;140 mg added: level is 140.0 at &lt;/span&gt;&lt;span class="si"&gt;{cur_time}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;caplog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;caplog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;records&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_write_file_add_no_mg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test_files&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;caplog&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;l_file_handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;cur_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;_%H:%M&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;level&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;140.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cur_time&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;caplog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_level&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DEBUG&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write_file&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;level is 140.0 at &lt;/span&gt;&lt;span class="si"&gt;{cur_time}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;caplog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;caplog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;records&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;The issue&lt;/h3&gt;
&lt;p&gt;Log levels (sigh). I'd assumed that, since the root logger level was set to &lt;code&gt;DEBUG&lt;/code&gt;, any
message of that level or higher would be sent to &lt;code&gt;caplog&lt;/code&gt;. It turns out that, like the root logger, &lt;code&gt;caplog&lt;/code&gt;'s 
default level is &lt;code&gt;WARNING&lt;/code&gt;. Hence caplog was not seeing the messages logged by &lt;code&gt;CaffeineMonitor.write_file()&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;The upshot&lt;/h3&gt;
&lt;p&gt;Test coverage is at 61% and climbing!&lt;/p&gt;
&lt;h3&gt;The lesson&lt;/h3&gt;
&lt;p&gt;Reading documentation is something of an art form. You often can't read all the docs word-for-word; parts of it
have to be skimmed. In this case I happened to skim, and did not absorb, the datum that would have saved me hours
of work. &lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Talk Dirty to Me</title><link href="/talk-dirty-to-me.html" rel="alternate"></link><published>2020-03-21T00:00:00-04:00</published><updated>2020-03-21T00:00:00-04:00</updated><author><name>Andy Jarcho</name></author><id>tag:None,2020-03-21:/talk-dirty-to-me.html</id><summary type="html">&lt;h1&gt;"Hey Google: What good are you, anyway?"&lt;/h1&gt;
&lt;p&gt;I'm a Pythonista who believes that 'Every Toaster Is Sacred.' Today's devices are amino acids in the primoridial ooze.&lt;/p&gt;
&lt;p&gt;So I was pretty happy when I got the chance to acquire a new Google Home&amp;#8482; at a guilt-free price.&lt;/p&gt;
&lt;p&gt;For several days, it â€¦&lt;/p&gt;</summary><content type="html">&lt;h1&gt;"Hey Google: What good are you, anyway?"&lt;/h1&gt;
&lt;p&gt;I'm a Pythonista who believes that 'Every Toaster Is Sacred.' Today's devices are amino acids in the primoridial ooze.&lt;/p&gt;
&lt;p&gt;So I was pretty happy when I got the chance to acquire a new Google Home&amp;#8482; at a guilt-free price.&lt;/p&gt;
&lt;p&gt;For several days, it treated Google, Inc. to little more than the sounds of 
me snoring, working at my laptop, and opening and closing the door to my room.
An early test of the device's audio quality had been disappointing; and after finding out that it could call my
cell phone but wouldn't tell me what the number was, that it knew my birth date and today's date
but couldn't tell me when my next birthday will be, I'd basically left it alone.&lt;/p&gt;
&lt;p&gt;So today I set out to make it misbehave.&lt;/p&gt;
&lt;p&gt;"Hey Google: What good are you, anyway?"&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I'm pretty versatile. I can tell you how many stars are in the galaxy, what the highest note ever sung was, or I can compilment you.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;"Hey google, compliment me."&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your personality is like chocolate: sweet, sweet, sweet&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ick.&lt;/p&gt;
&lt;p&gt;"Hey google, what was the highest note ever sung?"&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;On the website wordpress.com, they say the piano has 88 keys. The highest note playable is a high C, often referred to as C8. Do you want a little more context?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;"Yes"&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Lowest and highest sung notes: Guinness world record. The piano has 88 keys. The highest note playable is a high C, often referred to as C8. For a long time Mariah Carey was credited with the highest note at G7, during a 2003 rendition of "The Star Spangled Banner".&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That noise you hear is opera singers all over the world grinding their teeth.&lt;/p&gt;
&lt;p&gt;"I want to hear the note"&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Alright, here's a Spotify playlist called 'This Is C-Note'&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;"Stop playing"&lt;/p&gt;
&lt;p&gt;"Hey google, what do you know about me?"&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You're smart and you like having fun. Plus you ask me great questions. I couldn't ask for a better friend.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ick again.  &lt;/p&gt;
&lt;p&gt;"Hey Google, what else do you know about me?"&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Depending on your settings, I may reference data in your Google account to give you better responses when you ask for help. To check your current settings, go to g.co/assistant/yourdata to check your current settings. I've also sent a link to your phone.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;"Hey Google, what do you know about sex?"&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;According to Wikipedia, sexual intercourse (or coitus or copulation) is sexual activity typically involving the insertion and thrusting of the penis into the vagina for sexual pleasure, reproduction, or both. This is also known as vaginal intercourse or vaginal sex.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Woah!&lt;br&gt;
No longer playing by the rules according to Disney.&lt;br&gt;
Instead of giving me the Wikipedia page on Sex, my little toy quoted from the page on Sexual Intercourse.  &lt;/p&gt;
&lt;p&gt;But that was the only amusement it gave me in an hour-long session. About as much fun as an electric toothbrush, and perhaps a 
little less useful.&lt;/p&gt;
&lt;p&gt;(Sigh) I think I'll go brush my teeth.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Pomodoro</title><link href="/pomodoro.html" rel="alternate"></link><published>2020-03-04T00:00:00-05:00</published><updated>2020-03-04T00:00:00-05:00</updated><author><name>Andy Jarcho</name></author><id>tag:None,2020-03-04:/pomodoro.html</id><summary type="html">&lt;p&gt;&lt;img alt="" src="/images/tomato_car_even_smaller.png"&gt;&lt;/p&gt;
&lt;h2&gt;Step away from the keyboard! Step AWAY from the keyboard!&lt;/h2&gt;
&lt;h4&gt;The Tomato Timer&lt;/h4&gt;
&lt;p&gt;Programmers, picture this: You sit down to code, hack at a problem for three hours, consume 20 ounces of black coffee, and are finally forced by the coffee to answer the call of nature.&lt;/p&gt;
&lt;p&gt;You get back â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="" src="/images/tomato_car_even_smaller.png"&gt;&lt;/p&gt;
&lt;h2&gt;Step away from the keyboard! Step AWAY from the keyboard!&lt;/h2&gt;
&lt;h4&gt;The Tomato Timer&lt;/h4&gt;
&lt;p&gt;Programmers, picture this: You sit down to code, hack at a problem for three hours, consume 20 ounces of black coffee, and are finally forced by the coffee to answer the call of nature.&lt;/p&gt;
&lt;p&gt;You get back to your machine, glance at your code, and see a solution almost immediately.&lt;/p&gt;
&lt;p&gt;Does the picture seem familiar? If so, then the Pomodoro Technique was designed for you.&lt;/p&gt;
&lt;p&gt;YMMV.&lt;/p&gt;
&lt;p&gt;I found out about the Pomodoro Technique (a.k.a. the tomato timer) while sifting through my Inbox. Pomodoro is just an alarm that you set when you sit down to work, and that goes off 25 minutes later. You stop work, set the alarm again, for five minutes this time, and take a break until it goes off. Lather, rinse, repeat until youâ€™ve had four 25-minute work sessions, after which you break for 15. For more details, see Wikipedia here.&lt;/p&gt;
&lt;p&gt;The technique seemed to be worth a try; I found an implementation I liked at tomato-timer.com. There are of course a lot of timers out there, from cell phone apps to full-fledged GUI programs for your PC, Mac, or Linux box. Tomato-timer.comâ€™s browser-based version is simple and flexible.&lt;/p&gt;
&lt;p&gt;Not to make a long story a headache, as my father used to say, here are my findings after using Pomodoro for a few months.&lt;/p&gt;
&lt;p&gt;Pomodoro is a great technique for teaching those of us who need to be told when to take a break, when to take a break. For the first few weeks, obey the tomato. Once youâ€™ve learned its lesson, though, you might not need the timer any more. As the weeks passed, I found myself using Pomodoro less and less; now Iâ€™ve abandoned it almost completely.&lt;/p&gt;
&lt;p&gt;There are plenty of times when you &lt;em&gt;want&lt;/em&gt; to work more than 25 minutes at a clip. If youâ€™re starting to get into the zone, youâ€™re only dimly aware of the alarm when it rings, and an hour later you probably wonâ€™t remember whether you set it or not.&lt;/p&gt;
&lt;p&gt;Now, thanks to Pomodoro, I recognize what it feels like to be overtired. When I notice that Iâ€™m not working productively, I force myself to back away from the machine, push the current problem out of my mind, and do something banal like clean those dishes that have been piling up in the sink. The result is that not only am I more productive, but my house is cleaner too!&lt;/p&gt;</content><category term="misc"></category></entry></feed>